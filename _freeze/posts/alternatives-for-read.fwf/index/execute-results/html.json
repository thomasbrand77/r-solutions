{
  "hash": "49051bc747923c53174ee7e2b0aaeb5f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"alternatives for read.fwf\"\nauthor: \"Thomas Brand\"\ndate: \"2025-08-31\"\ncategories: [news, code, data.table, LaF, readr, fread, laf_open_fwf, read_fwf, read.fwf]\ndraft: false\n---\n\n\n\n# Abstract\n\nIn this post I will show you some alternatives for the [read.fwf](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/read.fwf)-function for reading fixed width files, that are considerably faster than read.fwf. The solutions we will look at are:\n\n-   [fread](https://rdatatable.gitlab.io/data.table/reference/fread.html) with preprocessing\n\n-   fread in combination with LaF::[laf_open_fwf](https://cran.r-project.org/web/packages/LaF/refman/LaF.html#laf_open_fwf) and tidyr::[unite](https://tidyr.tidyverse.org/reference/unite.html)\n\n-   [read_fwf](https://readr.tidyverse.org/reference/read_fwf.html) from [readr](https://readr.tidyverse.org/index.html)\n\nEach of these alternatives will give you enormous speed advantages over read.fwf.\n\n# Problem definition\n\n## Timing read.fwf\n\nThe thing is, that read.fwf is quite slow and in no way compareable to the speed of fread.\n\nLet's look at a reproducible example.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(nycflights23)\nlibrary(stringr)\n\n# the flights-table of nycflights23\nfl = as.data.table(flights)\n\n# make all columns character with width of 6\nfl1 = lapply(fl,str_pad, width = 6L)\nsetDT(fl1)\nfor (i in names(fl1)) {\n  fl1[is.na(col), col := \"      \",\n      env = list(col = i)]\n}\n\n# write a fixed width-file\nwrite.table(fl1,\n            file = \"~/flights.fwf\",\n            sep = \"\",\n            row.names = FALSE,\n            col.names = FALSE,\n            quote = FALSE)\n\n# write a csv-file\nfwrite(fl1,\n       file = \"~/flights.csv\",\n       quote = FALSE,\n       col.names = FALSE)\n\ntime_fwf = system.time({rfl_fwf = read.fwf(\"~/flights.fwf\",\n                                           width = c(rep(6L, times = 18),19L))})\n\ntime_csv = system.time({rfl_csv = fread(\"~/flights.csv\",\n                                        header = FALSE)})\n```\n:::\n\n\n\nThe execution times are quite amazing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf = round(time_fwf[\"elapsed\"] / time_csv[\"elapsed\"],0)\ntime_fwf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n 16.339  42.219  58.915 \n```\n\n\n:::\n\n```{.r .cell-code}\ntime_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n  0.230   0.016   0.248 \n```\n\n\n:::\n:::\n\n\n\nwhich means, that read.fwf was slower by a factor of 238. So it really pays to find a solution for this.\n\nBy the way: fread was even better at recognizing the type of datetime-variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rfl_fwf, n = 1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    V1 V2 V3 V4   V5  V6  V7 V8  V9    V10 V11    V12    V13    V14 V15  V16\n1 2023  1  1  1 2038 203 328  3 205     UA 628 N25201    EWR    SMF 367 2500\n  V17 V18                 V19\n1  20  38 2023-01-01 20:00:00\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(rfl_fwf$V19)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rfl_csv, n= 1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      V1    V2    V3    V4    V5    V6    V7    V8    V9    V10   V11    V12\n   <int> <int> <int> <int> <int> <int> <int> <int> <int> <char> <int> <char>\n1:  2023     1     1     1  2038   203   328     3   205     UA   628 N25201\n      V13    V14   V15   V16   V17   V18                 V19\n   <char> <char> <int> <int> <int> <int>              <POSc>\n1:    EWR    SMF   367  2500    20    38 2023-01-01 20:00:00\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(rfl_csv$V19)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n\n\n:::\n:::\n\n\n\n# Solution\n\nIf the obvious solution (avoid fwf-files or ask your IT-guys to put in commas between columns) isn't an option for you, we have to find a way of reading the files with fixed width.\n\n## fread with preprocessing\n\nThe [fread-function](https://rdatatable.gitlab.io/data.table/reference/fread.html) of the {data.table} package has the ability to do some preprocessing via the cmd-option.\n\n::: callout-note\nFor a detailed explanation of what you can do with the data.table-package please see\n\nBarrett T, Dowle M, Srinivasan A, Gorecki J, Chirico M, Hocking T, Schwendinger B, Krylov I (2025). *data.table: Extension of 'data.frame'*. R package version 1.17.99, [https://r-datatable.com](https://r-datatable.com/).\n:::\n\nWe can thus make use of the [awk-command](https://www.gnu.org/software/gawk/manual/gawk.html) of our Operating System. The detailed options for this command may depend on your operating system. We use the MacOS-Version here.\n\nLet's construct such a command\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# where to find the file\nfpath = \"~/flights.fwf\"\n\n# the width of the fields\nwidth = c(rep(6L, times = 18),19L)\n\n# calculating starting and ending positions\nstarting_pos = cumsum(c(1,width))\n\ncom = paste0(\n  \"awk '{ print \",\n  paste(\n    paste0(\"substr($0,\",starting_pos[1:length(width)],\",\",width,\")\"),\n    collapse = \"\\\",\\\"\"\n  ),\n  \" }' \",\n  fpath\n)\n\ncom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"awk '{ print substr($0,1,6)\\\",\\\"substr($0,7,6)\\\",\\\"substr($0,13,6)\\\",\\\"substr($0,19,6)\\\",\\\"substr($0,25,6)\\\",\\\"substr($0,31,6)\\\",\\\"substr($0,37,6)\\\",\\\"substr($0,43,6)\\\",\\\"substr($0,49,6)\\\",\\\"substr($0,55,6)\\\",\\\"substr($0,61,6)\\\",\\\"substr($0,67,6)\\\",\\\"substr($0,73,6)\\\",\\\"substr($0,79,6)\\\",\\\"substr($0,85,6)\\\",\\\"substr($0,91,6)\\\",\\\"substr($0,97,6)\\\",\\\"substr($0,103,6)\\\",\\\"substr($0,109,19) }' ~/flights.fwf\"\n```\n\n\n:::\n:::\n\n\n\nWith this command we will now call fread\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrfl_fread_fwf = fread(cmd = com,\n                      sep = \",\")\n```\n:::\n\n\n\n::: callout-note\nWe were using the awk-command here. This is because of the MasOS I'm using. In another OS you can use the [cut-command](https://wiki.ubuntuusers.de/cut/) with the –output-delimiter option. So you would have something like\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the width of the fields\nwidth = c(rep(6L, times = 18),19L)\n\n# calculating starting and ending positions\nstarting_pos = cumsum(c(1,width))\nending_pos = cumsum(width)\n\nlimits = paste(paste(starting_pos[1:length(width)],ending_pos,sep = \"-\"), collapse = \",\")\n\ncom2 = paste0(\"cut --output-delimiter=\\\",\\\" --characters=\",limits,\" \",fpath)\ncom2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cut --output-delimiter=\\\",\\\" --characters=1-6,7-12,13-18,19-24,25-30,31-36,37-42,43-48,49-54,55-60,61-66,67-72,73-78,79-84,85-90,91-96,97-102,103-108,109-127 ~/flights.fwf\"\n```\n\n\n:::\n:::\n\n\n:::\n\n## fread in combination with laf\n\nAnother way is to use the [laf_open_fwf](https://cran.r-project.org/web/packages/LaF/refman/LaF.html#laf_open_fwf) -function of the [LaF](https://cran.r-project.org/package=LaF)-package to read the file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(LaF)\n\n# establish a file-connection\nfwfcon = laf_open_fwf(filename = fpath,\n                      column_types = rep(\"character\",times = 19),\n                      column_widths = width)\n\n# extract the data\ndf = fwfcon[1:nrow(fwfcon)]\n\n# close file-connection\nclose(fwfcon)\n```\n:::\n\n\n\nWith this you already have a data.frame with all the columns as characters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    V1 V2 V3  V4   V5  V6  V7   V8  V9 V10  V11    V12 V13 V14 V15  V16 V17 V18\n1 2023  1  1   1 2038 203 328    3 205  UA  628 N25201 EWR SMF 367 2500  20  38\n2 2023  1  1  18 2300  78 228  135  53  DL  393 N830DN JFK ATL 108  760  23   0\n3 2023  1  1  31 2344  47 500  426  34  B6  371 N807JB JFK BQN 190 1576  23  44\n4 2023  1  1  33 2140 173 238 2352 166  B6 1053 N265JB JFK CHS 108  636  21  40\n5 2023  1  1  36 2048 228 223 2252 211  UA  219 N17730 EWR DTW  80  488  20  48\n6 2023  1  1 503  500   3 808  815  -7  AA  499 N925AN EWR MIA 154 1085   5   0\n                  V19\n1 2023-01-01 20:00:00\n2 2023-01-01 23:00:00\n3 2023-01-01 23:00:00\n4 2023-01-01 21:00:00\n5 2023-01-01 20:00:00\n6 2023-01-01 05:00:00\n```\n\n\n:::\n:::\n\n\n\nIn the next step you can either process every column separately, or you can convert this columns in one with a comma as a separator (we use the [unite](https://tidyr.tidyverse.org/reference/unite.html)-function of the [tidyr](https://tidyr.tidyverse.org/index.html)-package) and feed this into fread via the text-attribute (which shows the flexibility of the fread-function).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nrfl_fread_laf_fwf = fread(text = unite(df, col = \"v101\", sep = \",\")$v101,\n                          sep = \",\")\n```\n:::\n\n\n\nThis gives you the following results\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rfl_fread_laf_fwf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      V1    V2    V3    V4    V5    V6    V7    V8    V9    V10   V11    V12\n   <int> <int> <int> <int> <int> <int> <int> <int> <int> <char> <int> <char>\n1:  2023     1     1     1  2038   203   328     3   205     UA   628 N25201\n2:  2023     1     1    18  2300    78   228   135    53     DL   393 N830DN\n3:  2023     1     1    31  2344    47   500   426    34     B6   371 N807JB\n4:  2023     1     1    33  2140   173   238  2352   166     B6  1053 N265JB\n5:  2023     1     1    36  2048   228   223  2252   211     UA   219 N17730\n6:  2023     1     1   503   500     3   808   815    -7     AA   499 N925AN\n      V13    V14   V15   V16   V17   V18                 V19\n   <char> <char> <int> <int> <int> <int>              <POSc>\n1:    EWR    SMF   367  2500    20    38 2023-01-01 20:00:00\n2:    JFK    ATL   108   760    23     0 2023-01-01 23:00:00\n3:    JFK    BQN   190  1576    23    44 2023-01-01 23:00:00\n4:    JFK    CHS   108   636    21    40 2023-01-01 21:00:00\n5:    EWR    DTW    80   488    20    48 2023-01-01 20:00:00\n6:    EWR    MIA   154  1085     5     0 2023-01-01 05:00:00\n```\n\n\n:::\n:::\n\n\n\n## read_fwf\n\nYou can also use the [read_fwf](https://readr.tidyverse.org/reference/read_fwf.html)-function of the readr-package.\n\n::: callout-note\nFor a detailes explanation of what the readr-Package can do, please see\n\nWickham H, Hester J, Bryan J (2024). *readr: Read Rectangular Text Data*. R package version 2.1.5, https://github.com/tidyverse/readr, [https://readr.tidyverse.org](https://readr.tidyverse.org/).\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'readr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:LaF':\n\n    read_lines\n```\n\n\n:::\n\n```{.r .cell-code}\nrfl_readr_fwf = read_fwf(file = \"~/flights.fwf\",\n                         col_positions = fwf_widths(width))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 435352 Columns: 19\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Column specification ────────────────────────────────────────────────────────\n\nchr   (4): X10, X12, X13, X14\ndbl  (14): X1, X2, X3, X4, X5, X6, X7, X8, X9, X11, X15, X16, X17, X18\ndttm  (1): X19\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nThis is quite an easy and straightforward way of reading fw-files and gives you the following results\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rfl_readr_fwf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n     X1    X2    X3    X4    X5    X6    X7    X8    X9 X10     X11 X12    X13  \n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <chr>  <chr>\n1  2023     1     1     1  2038   203   328     3   205 UA      628 N25201 EWR  \n2  2023     1     1    18  2300    78   228   135    53 DL      393 N830DN JFK  \n3  2023     1     1    31  2344    47   500   426    34 B6      371 N807JB JFK  \n4  2023     1     1    33  2140   173   238  2352   166 B6     1053 N265JB JFK  \n5  2023     1     1    36  2048   228   223  2252   211 UA      219 N17730 EWR  \n6  2023     1     1   503   500     3   808   815    -7 AA      499 N925AN EWR  \n# ℹ 6 more variables: X14 <chr>, X15 <dbl>, X16 <dbl>, X17 <dbl>, X18 <dbl>,\n#   X19 <dttm>\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nAs you can see, by guessing the column type the read_fwf-function prefers numeric/double over integer. But there are also ways to specify data types for the columns to read in.\n:::\n\n# Speed\n\nSo far we have seen several possible solutions for our problem. Let's finally look at execution times for reading the files - each method is just executed once (you don't the same file several times, do you).\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: seconds\n           expr        min         lq       mean     median         uq\n       read.fwf 56.6462603 56.6462603 56.6462603 56.6462603 56.6462603\n          fread  0.2594342  0.2594342  0.2594342  0.2594342  0.2594342\n      fread_cmd  5.3978480  5.3978480  5.3978480  5.3978480  5.3978480\n      fread_laf  1.9338694  1.9338694  1.9338694  1.9338694  1.9338694\n readr_read_fwf  0.3103764  0.3103764  0.3103764  0.3103764  0.3103764\n        max neval\n 56.6462603     1\n  0.2594342     1\n  5.3978480     1\n  1.9338694     1\n  0.3103764     1\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}