{
  "hash": "b5b727b989e6475525ce5a58828e83b6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"using overlaps for time-slices\"\nauthor: \"Thomas Brand\"\ndate: \"2025-06-01\"\ncategories: [news, code, data.table]\ndraft: true\n---\n\n\n\n# Abstract\n\n# Problem definition\n\nIn customer/client databases it is often the case that each row in a table has a validity from one date `startDate` to another date `endDate`. You have to interpret this row so that the information that are contained in other columns of this row are valid just from `startDate` to `endDate`.\n\nThese rows are referred to as time-slices.\n\n::: callout-note\nAs an indication of time-slice without end (i.e. the end isn't known by now) you normally use a date far in the future, e.g. 9999-12-31.\n\nIt is as well useful for joining operations and calulations, that the endDate corresponds to the first Date where the slice isn't valid any more. In this way you can stitch together the slices of a person by the corresponding startDate to an endDate.\n:::\n\nIn mathematical terms we have an interval, that is closed at the left and open at the right: $[a, b)$.\n\nLet's look at some example-data.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   client   plan  startDate    endDate basicPrice discount toPayPerMonth\n   <char> <char>     <Date>     <Date>      <num>    <num>         <num>\n1:      A     T1 2024-07-01 9999-12-31      12.34    -0.34         12.00\n2:      B     T1 2024-11-01 2025-03-01      23.45    -1.45         22.00\n3:      B     T2 2025-03-01 9999-12-31      34.56     0.00         34.56\n4:      C     T2 2024-08-01 2025-01-01      14.79    -3.79         11.00\n```\n\n\n:::\n:::\n\n\n\nThis is of course a simplified example.\n\nOur task will be to calculate the cumulative payments per plan for each month from July 2024 to June 2025. For this one possible solution would be to generate one line per costumer for each plan and each month.\n\n# Solution\n\n## Explanation for date intervals\n\nWith this date conventions\n\n1.  the startDate is the first date that the row is valid and\n\n2.  the endDate is the first date that the row isn't valid any more,\n\nyou can easily calculate the months with the [lubridate](https://lubridate.tidyverse.org)-package and the [interval](https://lubridate.tidyverse.org/reference/interval.html)-function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'lubridate'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:data.table':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the months\ninterval(start = as.Date(\"2025-02-01\"), end = as.Date(\"2025-04-01\")) %/% months(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\nIf we had the convention that the endDate would be the last date where the row is still valid the calulations wouldn't add up.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the months\ninterval(start = as.Date(\"2025-02-01\"), end = as.Date(\"2025-03-31\")) %/% months(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n## Introduction of foverlaps\n\n::: callout-note\nFor a detailed explanation of what you can do with the data.table-package please see\n\nBarrett T, Dowle M, Srinivasan A, Gorecki J, Chirico M, Hocking T, Schwendinger B, Krylov I (2025). *data.table: Extension of 'data.frame'*. R package version 1.17.99, [https://r-datatable.com](https://r-datatable.com/).\n:::\n\nFirst, we will generate a data.table with two columns for the begin and the end of an interval. This can be done with the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintervals = data.table(startDate = seq(as.Date(\"2024-09-01\"), to = as.Date(\"2025-06-01\"), by = \"month\"))\nintervals[,endDate := shift(startDate, type = \"lead\")]\nintervals = na.omit(intervals)\ncols = c(\"startDate\",\"endDate\")\nsetkeyv(intervals, cols)\nintervals\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <startDate, endDate>\n    startDate    endDate\n       <Date>     <Date>\n1: 2024-09-01 2024-10-01\n2: 2024-10-01 2024-11-01\n3: 2024-11-01 2024-12-01\n4: 2024-12-01 2025-01-01\n5: 2025-01-01 2025-02-01\n6: 2025-02-01 2025-03-01\n7: 2025-03-01 2025-04-01\n8: 2025-04-01 2025-05-01\n9: 2025-05-01 2025-06-01\n```\n\n\n:::\n:::\n\n\n\nNext we will start a first try to see what foverlaps will produce.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult = foverlaps(dt, intervals, by.x = cols, by.y = cols)\nknitr::kable(result)\n```\n\n::: {.cell-output-display}\n\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2024-09-01 |2024-10-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-12-01 |2025-01-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-01-01 |2025-02-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-02-01 |2025-03-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-03-01 |2025-04-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-04-01 |2025-05-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-05-01 |2025-06-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-11-01 |2024-12-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-12-01 |2025-01-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-01-01 |2025-02-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-03-01 |2025-04-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-03-01 |2025-04-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-04-01 |2025-05-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-05-01 |2025-06-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2024-09-01 |2024-10-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-10-01 |2024-11-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-11-01 |2024-12-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-12-01 |2025-01-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2025-01-01 |2025-02-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n\n\n:::\n:::\n\n\n\nWe are almost there.\n\nBut if we look closer we see that there are some wrong lines\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult[c(10,15,16,24)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    startDate    endDate client   plan i.startDate  i.endDate basicPrice\n       <Date>     <Date> <char> <char>      <Date>     <Date>      <num>\n1: 2024-10-01 2024-11-01      B     T1  2024-11-01 2025-03-01      23.45\n2: 2025-03-01 2025-04-01      B     T1  2024-11-01 2025-03-01      23.45\n3: 2025-02-01 2025-03-01      B     T2  2025-03-01 9999-12-31      34.56\n4: 2025-01-01 2025-02-01      C     T2  2024-08-01 2025-01-01      14.79\n   discount toPayPerMonth\n      <num>         <num>\n1:    -1.45         22.00\n2:    -1.45         22.00\n3:     0.00         34.56\n4:    -3.79         11.00\n```\n\n\n:::\n:::\n\n\n\nComparing startDate and endDate with i.startDate an i.endDate we can see the foverlaps generated one line for the month, but that the current intervals ended the month before or didn't even have started.\n\n::: callout-important\nThe reason for this is, we have defined our intervals as open on the right.\n\nBy default the foverlaps-function used an overlap-mode \"any\" which will produce an overlap of two intervals $[a,b]$ and $[c,d]$ if $c\\le b \\wedge c\\ge d$ . So all intervals are treated as closed intervals.\n\nUnfortunately the other available types of overlaps in foverlaps don't fit our requirements:\n\n-   \"within\" - the interval has to lie within the other to overlap\n\n-   \"start\" - the start-dates have to be equal to overlap\n\n-   \"end\" - the end-dates have to be equal to overlap\n\n-   \"equal\" - the intervals have to be identical to overlap\n:::\n\n## Transforming the intervals\n\nTherefore we have to change our intervals from open on the right side to closed on the right side. We can do this by subtracting one day from the end. We will create a new Column `endDatem1` in our `dt`- and our `intervals`-tables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[,endDatem1 := endDate - days(1)]\nintervals[,endDatem1 := endDate - days(1)]\ncolsm1 = c(\"startDate\",\"endDatem1\")\nsetkeyv(intervals, colsm1)\n```\n:::\n\n\n\nLets try foverlaps again with `startDate` and `endDatem1`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_m1 = foverlaps(dt, intervals, by.x = colsm1, by.y = colsm1)\ncol_selected = c(\"startDate\",\"endDate\",\"client\",\"plan\",\"i.startDate\",\"i.endDate\",\"basicPrice\",\"discount\",\"toPayPerMonth\")\nknitr::kable(result_m1[,..col_selected])\n```\n\n::: {.cell-output-display}\n\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2024-09-01 |2024-10-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-12-01 |2025-01-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-01-01 |2025-02-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-02-01 |2025-03-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-03-01 |2025-04-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-04-01 |2025-05-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-05-01 |2025-06-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-12-01 |2025-01-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-01-01 |2025-02-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-03-01 |2025-04-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-04-01 |2025-05-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-05-01 |2025-06-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2024-09-01 |2024-10-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-10-01 |2024-11-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-11-01 |2024-12-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-12-01 |2025-01-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n\n\n:::\n:::\n\n\n\nFor clarity we have omitted the m1-suffix columns in the output. As we can see we the results are correct now. The incorrect lines have vanished.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}