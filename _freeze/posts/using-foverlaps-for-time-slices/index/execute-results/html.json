{
  "hash": "95665d545e459b0465bc6c0ea4887ac0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"using overlaps for time-slices\"\nauthor: \"Thomas Brand\"\ndate: \"2025-07-02\"\nformat: \n  html: \n    df-print: kable \ncategories: [news, code, data.table]\ndraft: false\n---\n\n\n\n# Abstract\n\nIn this blog I will show you how to split time-slices in client-data so that each row will be reproduced as many times as there are overlaps with a given set of relevant intervals by also preserving the other relevant information of the rows. We will do this by using the foverlaps-function of the data.table package together with some tweaks. We will cover some special cases, too.\n\n![](example_table.png)\n\n# Problem definition\n\nIn customer/client databases it is often the case that each row in a table has a validity from one date `startDate` to another date `endDate`. You have to interpret this row so that the information that are contained in other columns of this row are valid just from `startDate` to `endDate`.\n\nThese rows are referred to as time-slices.\n\n::: callout-note\nAs an indication of time-slice without end (i.e. the end isn't known by now) you normally use a date far in the future, e.g. 9999-12-31.\n\nIt is as well useful for joining operations and calulations, that the `endDate` corresponds to the first Date where the slice isn't valid any more. In this way you can stitch together the slices of a person by the corresponding `startDate` to an `endDate`.\n:::\n\nIn mathematical terms we have an interval, that is closed at the left and open at the right: $[a, b)$.\n\nLet's look at some example-data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(knitr)\nlibrary(kableExtra)\nload(\"./client_data.Rdata\")\ndt\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|client |plan |startDate  |endDate    | basicPrice| discount| toPayPerMonth|\n|:------|:----|:----------|:----------|----------:|--------:|-------------:|\n|A      |T1   |2024-07-06 |9999-12-31 |      12.34|    -0.34|         12.00|\n|B      |T1   |2024-11-06 |2025-03-01 |      23.45|    -1.45|         22.00|\n|B      |T2   |2025-03-01 |9999-12-31 |      34.56|     0.00|         34.56|\n|C      |T2   |2024-08-01 |2025-01-01 |      14.79|    -3.79|         11.00|\n\n</div>\n:::\n:::\n\n\n\nThis is of course a simplified example.\n\nOur task will be to calculate the cumulative payments per plan for each month from September 2024 to March 2025. For this one possible solution would be to generate one line per costumer for each plan and each month. With this solution it will be easier to calculate the amount to pay for time slices, that don't start or end at the beginning of a month.\n\n# Solution\n\n## Explanation for date intervals\n\nWith this date conventions\n\n1.  the `startDate` is the first date that the row is valid and\n\n2.  the `endDate` is the first date that the row isn't valid any more,\n\nyou can easily calculate the months with the [lubridate](https://lubridate.tidyverse.org)-package and the [interval](https://lubridate.tidyverse.org/reference/interval.html)-function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\n# Calculate the months\ninterval(start = as.Date(\"2025-02-01\"), end = as.Date(\"2025-04-01\")) %/% months(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\nIf we had the convention that the endDate would be the last date where the row is still valid the calulations wouldn't add up.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the months\ninterval(start = as.Date(\"2025-02-01\"), end = as.Date(\"2025-03-31\")) %/% months(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n## Introduction of foverlaps\n\n::: callout-note\nFor a detailed explanation of what you can do with the data.table-package please see\n\nBarrett T, Dowle M, Srinivasan A, Gorecki J, Chirico M, Hocking T, Schwendinger B, Krylov I (2025). *data.table: Extension of 'data.frame'*. R package version 1.17.99, [https://r-datatable.com](https://r-datatable.com/).\n:::\n\nFirst, we will generate a data.table with two columns for the begin and the end of an interval. Each row will cover exactly one month. This can be done with the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintervals = data.table(startDate = seq(as.Date(\"2024-09-01\"), to = as.Date(\"2025-04-01\"), by = \"month\"))\nintervals[,endDate := shift(startDate, type = \"lead\")]\nintervals = na.omit(intervals)\ncols = c(\"startDate\",\"endDate\")\nsetkeyv(intervals, cols)\nintervals\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |\n|:----------|:----------|\n|2024-09-01 |2024-10-01 |\n|2024-10-01 |2024-11-01 |\n|2024-11-01 |2024-12-01 |\n|2024-12-01 |2025-01-01 |\n|2025-01-01 |2025-02-01 |\n|2025-02-01 |2025-03-01 |\n|2025-03-01 |2025-04-01 |\n\n</div>\n:::\n:::\n\n\n\nNext we will start a first try to see what foverlaps will produce. We expect\n\n-   7 rows for customer A Plan T1 (i.e. for erery row in intervals)\\\n\n    | startDate  | endDate    |\n    |------------|------------|\n    | 2024-09-01 | 2024-10-01 |\n    | 2024-10-01 | 2024-11-01 |\n    | 2024-11-01 | 2024-12-01 |\n    | 2024-12-01 | 2025-01-01 |\n    | 2025-01-01 | 2025-02-01 |\n    | 2025-02-01 | 2025-03-01 |\n    | 2025-03-01 | 2025-04-01 |\n\n-   4 rows für customer B Plan T1\\\n\n    | startDate  | endDate    |\n    |------------|------------|\n    | 2024-11-06 | 2024-12-01 |\n    | 2024-12-01 | 2025-01-01 |\n    | 2025-01-01 | 2025-02-01 |\n    | 2025-02-01 | 2025-03-01 |\n\n-   1 row für customer B Plan T2\\\n\n    | startDate  | endDate    |\n    |------------|------------|\n    | 2025-03-01 | 2025-04-01 |\n\n-   4 rows for customer C Plan T2\\\n\n    | startDate  | endDate    |\n    |------------|------------|\n    | 2024-09-01 | 2024-10-01 |\n    | 2024-10-01 | 2024-11-01 |\n    | 2024-11-01 | 2024-12-01 |\n    | 2024-12-01 | 2025-01-01 |\n\nWe get instead\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult = foverlaps(dt, intervals, by.x = cols, by.y = cols)\nresult\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2024-09-01 |2024-10-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-12-01 |2025-01-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-01-01 |2025-02-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-02-01 |2025-03-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-03-01 |2025-04-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-12-01 |2025-01-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-01-01 |2025-02-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-03-01 |2025-04-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-03-01 |2025-04-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2024-09-01 |2024-10-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-10-01 |2024-11-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-11-01 |2024-12-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-12-01 |2025-01-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2025-01-01 |2025-02-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n\n</div>\n:::\n:::\n\n\n\nWe can see, that every row of the original table was multiplied into as many rows as had overlaps with the rows of the intervals-table.\n\nIn the result we have\n\n-   `startDate` and `endDate` as the corresponding values of the intervals-table and\n\n-   `i.startDate` and i.`endDate` as the original values of the table\n\n-   we did get\n\n    -   the 7 rows for customer A Plan T1\n\n    -   5 rows instead of 4 for customer B Plan T1 an the wrong start date for the fisrt row\n\n    -   2 rows instead of 1 for customer B Plan T2\n\n    -   5 rowa instead of 4 for customer C Plan T2\n\nLet's look closer at the rows with the numbers 12, 13, 19\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult[c(12,13,19)]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2025-03-01 |2025-04-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-01-01 |2025-02-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n\n</div>\n:::\n:::\n\n\n\nComparing `startDate` and `endDate` with `i.startDate` and `i.endDate` we can see the foverlaps generated a row for the month, but that the current intervals ended the month before or didn't even have started.\n\n::: callout-important\nThe reason for this is, that we have defined our intervals as open on the right.\n\nBy default the foverlaps-function used an overlap-mode \"any\" which will produce an overlap of two intervals $[a,b]$ and $[c,d]$ if $c\\le b \\wedge d\\ge a$ . So all intervals are treated as closed intervals.\n\nUnfortunately the other available types of overlaps in foverlaps don't suit our requirements:\n\n-   \"within\" - the interval has to lie within the other to overlap\n\n-   \"start\" - the start-dates have to be equal to overlap\n\n-   \"end\" - the end-dates have to be equal to overlap\n\n-   \"equal\" - the intervals have to be identical to overlap\n\nMaybe this will change if the minoverlap-attribute is implemented.\n:::\n\nOn the other hand we have row 8, which is also wrong\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult[c(8)]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2024-11-01 |2024-12-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|            22|\n\n</div>\n:::\n:::\n\n\n\nComparing the original values with the new ones we can see, that the row isn't correct, as $[2024-11-01,2024-12-01)$ isn't completely contained in the original interval $[2024-11-06,2025-03-01)$.\n\n## Transforming the intervals - endDate\n\nTherefore we have to change our intervals from open on the right side to closed on the right side. We can do this by subtracting one day from the end. We will create a new column `endDatem1` in our `dt`- and our `intervals`-tables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[,endDatem1 := endDate - days(1)]\nintervals[,endDatem1 := endDate - days(1)]\ncolsm1 = c(\"startDate\",\"endDatem1\")\nsetkeyv(intervals, colsm1)\nintervals\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |endDatem1  |\n|:----------|:----------|:----------|\n|2024-09-01 |2024-10-01 |2024-09-30 |\n|2024-10-01 |2024-11-01 |2024-10-31 |\n|2024-11-01 |2024-12-01 |2024-11-30 |\n|2024-12-01 |2025-01-01 |2024-12-31 |\n|2025-01-01 |2025-02-01 |2025-01-31 |\n|2025-02-01 |2025-03-01 |2025-02-28 |\n|2025-03-01 |2025-04-01 |2025-03-31 |\n\n</div>\n:::\n:::\n\n\n\nLets try foverlaps again with `startDate` and `endDatem1`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_m1 = foverlaps(dt, intervals, by.x = colsm1, by.y = colsm1)\ncol_selected = c(\"startDate\",\"endDate\",\"client\",\"plan\",\"i.startDate\",\"i.endDate\",\"basicPrice\",\"discount\",\"toPayPerMonth\")\nresult_m1[,..col_selected]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2024-09-01 |2024-10-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-12-01 |2025-01-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-01-01 |2025-02-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-02-01 |2025-03-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-03-01 |2025-04-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-12-01 |2025-01-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-01-01 |2025-02-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-03-01 |2025-04-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2024-09-01 |2024-10-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-10-01 |2024-11-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-11-01 |2024-12-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-12-01 |2025-01-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n\n</div>\n:::\n:::\n\n\n\nFor clarity we have omitted the m1-suffix columns in the output. As we can see the results are correct now. The incorrect rows 12, 13 and 19 have vanished.\n\n## Transforming the intervals - startDate\n\nTo correct the incorrect row number 8 we have to replace the startDate in every row where it is smaller than i.startDate with the value in i.startDate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_m1[startDate < i.startDate, startDate := i.startDate]\nresult_m1[,..col_selected]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2024-09-01 |2024-10-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-12-01 |2025-01-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-01-01 |2025-02-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-02-01 |2025-03-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-03-01 |2025-04-01 |A      |T1   |2024-07-06  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-06 |2024-12-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-12-01 |2025-01-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-01-01 |2025-02-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T1   |2024-11-06  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-03-01 |2025-04-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2024-09-01 |2024-10-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-10-01 |2024-11-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-11-01 |2024-12-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-12-01 |2025-01-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n\n</div>\n:::\n:::\n\n\n\nWe can now use `startDate` and `endDate` for further calculations.\n\n::: callout-note\nIt is important, that we tweaked the result in exact this order\n\n1.  transforming endDate\n\n2.  transforming startDate\n\nOtherwise we wouldn't have gotten the correct result.\n:::\n\n## Solutions for special forms of intervals\n\nThe solution above works as long as you are dealing with real intervals $[a,b)$ where $a<b$ .\n\nSometimes, however, you can have the situation, that you have records that are only valid \"a logical second\", meaning that you documented some changes in your records, but these changes didn't lead to a real time span. In this case you have intervals where $a=b$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_special = data.table(startDate = as.Date(c(\"2025-01-01\",\"2025-02-01\",\"2025-02-01\")),\n                        endDate = as.Date(c(\"2025-02-01\",\"2025-02-01\",\"9999-12-31\")),\n                        name = c(\"Doe\",\"Smith\",\"Smith\"),\n                        toPayPerMonth = c(1.23,1.23,2.34))\n\ndt_special[,endDatem1 := endDate - days(1)]\ndt_special\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |name  | toPayPerMonth|endDatem1  |\n|:----------|:----------|:-----|-------------:|:----------|\n|2025-01-01 |2025-02-01 |Doe   |          1.23|2025-01-31 |\n|2025-02-01 |2025-02-01 |Smith |          1.23|2025-01-31 |\n|2025-02-01 |9999-12-31 |Smith |          2.34|9999-12-30 |\n\n</div>\n:::\n:::\n\n\n\nLets see how foverlaps handles these situations:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_sp1 = foverlaps(dt_special, intervals, by.x = colsm1, by.y = colsm1) \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in foverlaps(dt_special, intervals, by.x = colsm1, by.y = colsm1): All entries in column 'startDate' should be <= corresponding entries in column 'endDatem1' in data.table x.\n```\n\n\n:::\n:::\n\n\n\nAs you can see the foverlaps-function returns an error-message.\n\n### Omit these rows if possible\n\nIn our use-case of this blog the easiest solution would be eliminate these rows from our dataset, as we are only interested in the amount someone has to pay which is time/date multiplied by the sum to pay per month. Lets see how we can do this\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_sp2 = foverlaps(dt_special[startDate <= endDatem1], intervals, by.x = colsm1, by.y = colsm1)\nresult_sp2[,.(startDate,endDate,name,toPayPerMonth)]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |name  | toPayPerMonth|\n|:----------|:----------|:-----|-------------:|\n|2025-01-01 |2025-02-01 |Doe   |          1.23|\n|2025-02-01 |2025-03-01 |Smith |          2.34|\n|2025-03-01 |2025-04-01 |Smith |          2.34|\n\n</div>\n:::\n:::\n\n\n\nIt works, but we loose the information, that the name-change didn't cause a change of the payment per month.\n\n### Manipulate the start columns as well\n\nIf on the other hand we are interested in conserving the information that the name-change happened without change of payment per month, we will need a different approach\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_special[startDate == endDate, startDate := startDate - days(1)]\nresult_sp3 = foverlaps(dt_special, intervals, by.x = colsm1, by.y = colsm1)\nresult_sp3[i.startDate == endDatem1, startDate := endDate]\nresult_sp3\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|startDate  |endDate    |endDatem1  |i.startDate |i.endDate  |name  | toPayPerMonth|i.endDatem1 |\n|:----------|:----------|:----------|:-----------|:----------|:-----|-------------:|:-----------|\n|2025-01-01 |2025-02-01 |2025-01-31 |2025-01-01  |2025-02-01 |Doe   |          1.23|2025-01-31  |\n|2025-02-01 |2025-02-01 |2025-01-31 |2025-01-31  |2025-02-01 |Smith |          1.23|2025-01-31  |\n|2025-02-01 |2025-03-01 |2025-02-28 |2025-02-01  |9999-12-31 |Smith |          2.34|9999-12-30  |\n|2025-03-01 |2025-04-01 |2025-03-31 |2025-02-01  |9999-12-31 |Smith |          2.34|9999-12-30  |\n\n</div>\n:::\n:::\n\n\n\nWhat we did was:\n\n1.  subtract 1 day from startDate if it equals endDate\n\n2.  do our foverlaps procedure from above\n\n3.  set startDate to endDate if the original i.startDate (the one we changed) equals our manipulated endDatem1\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}