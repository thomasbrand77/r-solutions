{
  "hash": "51d326baff42c635af4d28aecd1174a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"calculating months with fractions\"\nauthor: \"Thomas Brand\"\ndate: \"2025-06-08\"\ncategories: [news, code, lubridate]\ndraft: true\n---\n\n\n\n# Abstract\n\n# Problem definition\n\nIn many cases you have the situation, that you bill a customer on a per month basis, e.g. in a subscription for a service. So any record (i.e. row) has a\n\n-   `startDate`\\` which is the first day, that a row is valid and an\n\n-   `endDate`\\` which is the first day, that a row isn't valid any more.\n\nWith this in mind you can easily calculate the months between two dates as the difference between the months of your dates if you substract them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(lubridate)\n\nstart = as.Date(\"2025-01-01\")\nend = as.Date(\"2025-03-01\")\n\nmonths_between = month(end) - month(start)\nmonths_between\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\nIn this case it doesn't matter how many days the month has, i.e. February with its 28/29 days count as equally as one month as does March with its 31 days.\n\nApart for the obvious problems with year-changes in this calculation-approach, we will also have to deal with beginnings or endings within a month. This could be because someone started the subscription not on the first of a month or terminated the service before the end of the month, e.g. by right of premature cancellation or just because the person died.\n\nIn this cases you cant bill the customer for the whole month, just for the days he used the service. By definition we will assume that for $x$ days of service we can bill the customer with $\\frac{x}{dsom}$ of the monthly payment, with $dsom$ the number of days of the corresponding month.\n\nSo, let's look at several different situations of possible scenarios for calculating the **month-with-fractions**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt = rowwiseDT(start=, end=, expected=,\n               \"2025-01-01\",\"2025-02-01\", 1.0,       # 1 month\n               \"2024-11-01\",\"2025-02-01\", 3.0,       # 3 months\n               \"2025-01-01\",\"2025-02-10\", 1 + 9/28,  # 1 month and 9 days of February\n               \"2025-01-15\",\"2025-03-01\", 1 + 14/28, # 1 month and 14 days of February\n               \"2025-01-15\",\"2025-03-10\", 1 + 16/31 + 9/31,  # 1 month and 16 + 9 = 25 days\n               \"2025-01-15\",\"2025-01-15\", 0,         # 0 months\n               \"2025-01-15\",\"2025-01-16\", 1/31       # 0 months an 1 day of a \n               )\ndt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        start        end   expected\n       <char>     <char>      <num>\n1: 2025-01-01 2025-02-01 1.00000000\n2: 2024-11-01 2025-02-01 3.00000000\n3: 2025-01-01 2025-02-10 1.32142857\n4: 2025-01-15 2025-03-01 1.50000000\n5: 2025-01-15 2025-03-10 1.80645161\n6: 2025-01-15 2025-01-15 0.00000000\n7: 2025-01-15 2025-01-16 0.03225806\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nTo construct the data.table we used the [rowiseDT](https://rdatatable.gitlab.io/data.table/reference/rowwiseDT.html)-function of data.table which was inspired by the [tribble](https://tibble.tidyverse.org/reference/tribble.html)-function of the [tibble](https://tibble.tidyverse.org/index.html)-package.\n:::\n\n# Solution\n\nTo calculate the months we can use the following functions from the [lubridate](https://lubridate.tidyverse.org)-package\n\n-   [interval](https://lubridate.tidyverse.org/reference/interval.html) to define a date-interval and\n\n-   [time_length](https://lubridate.tidyverse.org/reference/time_length.html) to calculate the monts.\n\nLet's see how this works. First we build the intervals\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[,interval := interval(start, end)]\ndt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        start        end   expected                       interval\n       <char>     <char>      <num>                     <Interval>\n1: 2025-01-01 2025-02-01 1.00000000 2025-01-01 UTC--2025-02-01 UTC\n2: 2024-11-01 2025-02-01 3.00000000 2024-11-01 UTC--2025-02-01 UTC\n3: 2025-01-01 2025-02-10 1.32142857 2025-01-01 UTC--2025-02-10 UTC\n4: 2025-01-15 2025-03-01 1.50000000 2025-01-15 UTC--2025-03-01 UTC\n5: 2025-01-15 2025-03-10 1.80645161 2025-01-15 UTC--2025-03-10 UTC\n6: 2025-01-15 2025-01-15 0.00000000 2025-01-15 UTC--2025-01-15 UTC\n7: 2025-01-15 2025-01-16 0.03225806 2025-01-15 UTC--2025-01-16 UTC\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nAs you can see, we didn't even have to convert the character-dates into actual dates. The interval-function did all this for us.\n:::\n\nThen we calculate the monts\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[,months := time_length(interval,\n                          unit = \"month\")]\ndt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        start        end   expected                       interval     months\n       <char>     <char>      <num>                     <Interval>      <num>\n1: 2025-01-01 2025-02-01 1.00000000 2025-01-01 UTC--2025-02-01 UTC 1.00000000\n2: 2024-11-01 2025-02-01 3.00000000 2024-11-01 UTC--2025-02-01 UTC 3.00000000\n3: 2025-01-01 2025-02-10 1.32142857 2025-01-01 UTC--2025-02-10 UTC 1.32142857\n4: 2025-01-15 2025-03-01 1.50000000 2025-01-15 UTC--2025-03-01 UTC 1.50000000\n5: 2025-01-15 2025-03-10 1.80645161 2025-01-15 UTC--2025-03-10 UTC 1.82142857\n6: 2025-01-15 2025-01-15 0.00000000 2025-01-15 UTC--2025-01-15 UTC 0.00000000\n7: 2025-01-15 2025-01-16 0.03225806 2025-01-15 UTC--2025-01-16 UTC 0.03225806\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}