{
  "hash": "81c62fde50962dc172275a8d5cd7b3b4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"using overlaps for time-slices\"\nauthor: \"Thomas Brand\"\ndate: \"2025-06-01\"\ncategories: [news, code, data.table]\ndraft: true\n---\n\n\n\n# Abstract\n\n# Problem definition\n\nIn customer/client databases it is often the case that each row in a table has a validity from one date `startDate` to another date `endDate`. You have to interpret this row so that the information that are contained in other columns of this row are valid just from `startDate` to `endDate`.\n\nThese rows are referred to as time-slices.\n\n::: callout-note\nAs an indication of time-slice without end (i.e. the end isn't known by now) you normally use a date far in the future, e.g. 9999-12-31.\n\nIt is as well useful for joining operations and calulations, that the endDate corresponds to the first Date where the slice isn't valid any more. In this way you can stitch together the slices of a person by the corresponding startDate to an endDate.\n:::\n\nLet's look at some example-data.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   client   plan  startDate    endDate basicPrice discount toPayPerMonth\n   <char> <char>     <Date>     <Date>      <num>    <num>         <num>\n1:      A     T1 2024-07-01 9999-12-31      12.34    -0.34         12.00\n2:      B     T1 2024-11-01 2025-03-01      23.45    -1.45         22.00\n3:      B     T2 2025-03-01 9999-12-31      34.56     0.00         34.56\n4:      C     T2 2024-08-01 2025-01-01      14.79    -3.79         11.00\n```\n\n\n:::\n:::\n\n\n\nThis is of course a simplified example.\n\nOur task will be to calculate the cumulative payments per plan for each month from July 2024 to June 2025. For this one possible solution would be to generate one line per costumer for each plan and each month.\n\n# Solution\n\nFirst, we will generate a data.table with two columns for the begin and the end of an interval. This can be done with the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintervals = data.table(startDate = seq(as.Date(\"2024-09-01\"), to = as.Date(\"2025-06-01\"), by = \"month\"))\nintervals[,endDate := shift(startDate, type = \"lead\")]\nintervals = na.omit(intervals)\ncols = c(\"startDate\",\"endDate\")\nsetkeyv(intervals, cols)\nintervals\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <startDate, endDate>\n    startDate    endDate\n       <Date>     <Date>\n1: 2024-09-01 2024-10-01\n2: 2024-10-01 2024-11-01\n3: 2024-11-01 2024-12-01\n4: 2024-12-01 2025-01-01\n5: 2025-01-01 2025-02-01\n6: 2025-02-01 2025-03-01\n7: 2025-03-01 2025-04-01\n8: 2025-04-01 2025-05-01\n9: 2025-05-01 2025-06-01\n```\n\n\n:::\n:::\n\n\n\nNext we will start a first try to sse what foverlaps will produce.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult = foverlaps(dt, intervals, by.x = cols, by.y = cols)\nknitr::kable(result)\n```\n\n::: {.cell-output-display}\n\n\n|startDate  |endDate    |client |plan |i.startDate |i.endDate  | basicPrice| discount| toPayPerMonth|\n|:----------|:----------|:------|:----|:-----------|:----------|----------:|--------:|-------------:|\n|2024-09-01 |2024-10-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-11-01 |2024-12-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-12-01 |2025-01-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-01-01 |2025-02-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-02-01 |2025-03-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-03-01 |2025-04-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-04-01 |2025-05-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2025-05-01 |2025-06-01 |A      |T1   |2024-07-01  |9999-12-31 |      12.34|    -0.34|         12.00|\n|2024-10-01 |2024-11-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-11-01 |2024-12-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2024-12-01 |2025-01-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-01-01 |2025-02-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-03-01 |2025-04-01 |B      |T1   |2024-11-01  |2025-03-01 |      23.45|    -1.45|         22.00|\n|2025-02-01 |2025-03-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-03-01 |2025-04-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-04-01 |2025-05-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2025-05-01 |2025-06-01 |B      |T2   |2025-03-01  |9999-12-31 |      34.56|     0.00|         34.56|\n|2024-09-01 |2024-10-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-10-01 |2024-11-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-11-01 |2024-12-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2024-12-01 |2025-01-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n|2025-01-01 |2025-02-01 |C      |T2   |2024-08-01  |2025-01-01 |      14.79|    -3.79|         11.00|\n\n\n:::\n:::\n\n\n\nWe are almost there.\n\nBut if we look closer we see that there are some wrong lines\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult[c(15,16,24)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    startDate    endDate client   plan i.startDate  i.endDate basicPrice\n       <Date>     <Date> <char> <char>      <Date>     <Date>      <num>\n1: 2025-03-01 2025-04-01      B     T1  2024-11-01 2025-03-01      23.45\n2: 2025-02-01 2025-03-01      B     T2  2025-03-01 9999-12-31      34.56\n3: 2025-01-01 2025-02-01      C     T2  2024-08-01 2025-01-01      14.79\n   discount toPayPerMonth\n      <num>         <num>\n1:    -1.45         22.00\n2:     0.00         34.56\n3:    -3.79         11.00\n```\n\n\n:::\n:::\n\n\n\nComparing startDate and endDate with i.startDate an i.endDate we can see the foverlaps generated one line for the month, but that the current intervals ended the month before or didn't even have started.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}