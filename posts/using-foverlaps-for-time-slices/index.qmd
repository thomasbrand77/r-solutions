---
title: "using overlaps for time-slices"
author: "Thomas Brand"
date: "2025-07-02"
format: 
  html: 
    df-print: kable 
categories: [news, code, data.table]
draft: false
---

# Abstract

In this blog I will show you how to split time-slices in client-data so that each row will be reproduced as many times as there are overlaps with a given set of relevant intervals by also preserving the other relevant information of the rows. We will do this by using the foverlaps-function of the data.table package together with some tweaks. We will cover some special cases, too.

![](example_table.png)

# Problem definition

In customer/client databases it is often the case that each row in a table has a validity from one date `startDate` to another date `endDate`. You have to interpret this row so that the information that are contained in other columns of this row are valid just from `startDate` to `endDate`.

These rows are referred to as time-slices.

::: callout-note
As an indication of time-slice without end (i.e. the end isn't known by now) you normally use a date far in the future, e.g. 9999-12-31.

It is as well useful for joining operations and calulations, that the `endDate` corresponds to the first Date where the slice isn't valid any more. In this way you can stitch together the slices of a person by the corresponding `startDate` to an `endDate`.
:::

In mathematical terms we have an interval, that is closed at the left and open at the right: $[a, b)$.

Let's look at some example-data.

```{r}
#| label: example-data

library(data.table)
library(knitr)
library(kableExtra)
load("./client_data.Rdata")
dt
```

This is of course a simplified example.

Our task will be to calculate the cumulative payments per plan for each month from September 2024 to March 2025. For this one possible solution would be to generate one line per costumer for each plan and each month. With this solution it will be easier to calculate the amount to pay for time slices, that don't start or end at the beginning of a month.

# Solution

## Explanation for date intervals

With this date conventions

1.  the `startDate` is the first date that the row is valid and

2.  the `endDate` is the first date that the row isn't valid any more,

you can easily calculate the months with the [lubridate](https://lubridate.tidyverse.org)-package and the [interval](https://lubridate.tidyverse.org/reference/interval.html)-function

```{r}
#| label: date-example
#| warning: FALSE

library(lubridate)

# Calculate the months
interval(start = as.Date("2025-02-01"), end = as.Date("2025-04-01")) %/% months(1)
```

If we had the convention that the endDate would be the last date where the row is still valid the calulations wouldn't add up.

```{r}
#| label: date-example-unfortunate

# Calculate the months
interval(start = as.Date("2025-02-01"), end = as.Date("2025-03-31")) %/% months(1)
```

## Introduction of foverlaps

::: callout-note
For a detailed explanation of what you can do with the data.table-package please see

Barrett T, Dowle M, Srinivasan A, Gorecki J, Chirico M, Hocking T, Schwendinger B, Krylov I (2025). *data.table: Extension of 'data.frame'*. R package version 1.17.99, [https://r-datatable.com](https://r-datatable.com/).
:::

First, we will generate a data.table with two columns for the begin and the end of an interval. Each row will cover exactly one month. This can be done with the following code.

```{r}
#| label: definition-of-intervals

intervals = data.table(startDate = seq(as.Date("2024-09-01"), to = as.Date("2025-04-01"), by = "month"))
intervals[,endDate := shift(startDate, type = "lead")]
intervals = na.omit(intervals)
cols = c("startDate","endDate")
setkeyv(intervals, cols)
intervals
```

Next we will start a first try to see what foverlaps will produce. We expect

-   7 rows for customer A Plan T1 (i.e. for erery row in intervals)\

    | startDate  | endDate    |
    |------------|------------|
    | 2024-09-01 | 2024-10-01 |
    | 2024-10-01 | 2024-11-01 |
    | 2024-11-01 | 2024-12-01 |
    | 2024-12-01 | 2025-01-01 |
    | 2025-01-01 | 2025-02-01 |
    | 2025-02-01 | 2025-03-01 |
    | 2025-03-01 | 2025-04-01 |

-   4 rows für customer B Plan T1\

    | startDate  | endDate    |
    |------------|------------|
    | 2024-11-06 | 2024-12-01 |
    | 2024-12-01 | 2025-01-01 |
    | 2025-01-01 | 2025-02-01 |
    | 2025-02-01 | 2025-03-01 |

-   1 row für customer B Plan T2\

    | startDate  | endDate    |
    |------------|------------|
    | 2025-03-01 | 2025-04-01 |

-   4 rows for customer C Plan T2\

    | startDate  | endDate    |
    |------------|------------|
    | 2024-09-01 | 2024-10-01 |
    | 2024-10-01 | 2024-11-01 |
    | 2024-11-01 | 2024-12-01 |
    | 2024-12-01 | 2025-01-01 |

We get instead

```{r}
#| label: first-draft-of-fintervals

result = foverlaps(dt, intervals, by.x = cols, by.y = cols)
result
```

We can see, that every row of the original table was multiplied into as many rows as had overlaps with the rows of the intervals-table.

In the result we have

-   `startDate` and `endDate` as the corresponding values of the intervals-table and

-   `i.startDate` and i.`endDate` as the original values of the table

-   we did get

    -   the 7 rows for customer A Plan T1

    -   5 rows instead of 4 for customer B Plan T1 an the wrong start date for the fisrt row

    -   2 rows instead of 1 for customer B Plan T2

    -   5 rowa instead of 4 for customer C Plan T2

Let's look closer at the rows with the numbers 12, 13, 19

```{r}
#| label: errors-of-first-draft

result[c(12,13,19)]
```

Comparing `startDate` and `endDate` with `i.startDate` and `i.endDate` we can see the foverlaps generated a row for the month, but that the current intervals ended the month before or didn't even have started.

::: callout-important
The reason for this is, that we have defined our intervals as open on the right.

By default the foverlaps-function used an overlap-mode "any" which will produce an overlap of two intervals $[a,b]$ and $[c,d]$ if $c\le b \wedge d\ge a$ . So all intervals are treated as closed intervals.

Unfortunately the other available types of overlaps in foverlaps don't suit our requirements:

-   "within" - the interval has to lie within the other to overlap

-   "start" - the start-dates have to be equal to overlap

-   "end" - the end-dates have to be equal to overlap

-   "equal" - the intervals have to be identical to overlap

Maybe this will change if the minoverlap-attribute is implemented.
:::

On the other hand we have row 8, which is also wrong

```{r}
#| label: explanation-1

result[c(8)]
```

Comparing the original values with the new ones we can see, that the row isn't correct, as $[2024-11-01,2024-12-01)$ isn't completely contained in the original interval $[2024-11-06,2025-03-01)$.

## Transforming the intervals - endDate

Therefore we have to change our intervals from open on the right side to closed on the right side. We can do this by subtracting one day from the end. We will create a new column `endDatem1` in our `dt`- and our `intervals`-tables.

```{r}
#| label: transform-of-intervals

dt[,endDatem1 := endDate - days(1)]
intervals[,endDatem1 := endDate - days(1)]
colsm1 = c("startDate","endDatem1")
setkeyv(intervals, colsm1)
intervals
```

Lets try foverlaps again with `startDate` and `endDatem1`.

```{r}
#| label: calculation-of-results

result_m1 = foverlaps(dt, intervals, by.x = colsm1, by.y = colsm1)
col_selected = c("startDate","endDate","client","plan","i.startDate","i.endDate","basicPrice","discount","toPayPerMonth")
result_m1[,..col_selected]
```

For clarity we have omitted the m1-suffix columns in the output. As we can see the results are correct now. The incorrect rows 12, 13 and 19 have vanished.

## Transforming the intervals - startDate

To correct the incorrect row number 8 we have to replace the startDate in every row where it is smaller than i.startDate with the value in i.startDate

```{r}
#| label: correction-1

result_m1[startDate < i.startDate, startDate := i.startDate]
result_m1[,..col_selected]
```

We can now use `startDate` and `endDate` for further calculations.

::: callout-note
It is important, that we tweaked the result in exact this order

1.  transforming endDate

2.  transforming startDate

Otherwise we wouldn't have gotten the correct result.
:::

## Solutions for special forms of intervals

The solution above works as long as you are dealing with real intervals $[a,b)$ where $a<b$ .

Sometimes, however, you can have the situation, that you have records that are only valid "a logical second", meaning that you documented some changes in your records, but these changes didn't lead to a real time span. In this case you have intervals where $a=b$.

```{r}
#| label: special-slices

dt_special = data.table(startDate = as.Date(c("2025-01-01","2025-02-01","2025-02-01")),
                        endDate = as.Date(c("2025-02-01","2025-02-01","9999-12-31")),
                        name = c("Doe","Smith","Smith"),
                        toPayPerMonth = c(1.23,1.23,2.34))

dt_special[,endDatem1 := endDate - days(1)]
dt_special
```

Lets see how foverlaps handles these situations:

```{r}
#| label: first-try-special-interval
#| error: TRUE

result_sp1 = foverlaps(dt_special, intervals, by.x = colsm1, by.y = colsm1) 
```

As you can see the foverlaps-function returns an error-message.

### Omit these rows if possible

In our use-case of this blog the easiest solution would be eliminate these rows from our dataset, as we are only interested in the amount someone has to pay which is time/date multiplied by the sum to pay per month. Lets see how we can do this

```{r}

result_sp2 = foverlaps(dt_special[startDate <= endDatem1], intervals, by.x = colsm1, by.y = colsm1)
result_sp2[,.(startDate,endDate,name,toPayPerMonth)]
```

It works, but we loose the information, that the name-change didn't cause a change of the payment per month.

### Manipulate the start columns as well

If on the other hand we are interested in conserving the information that the name-change happened without change of payment per month, we will need a different approach

```{r}
dt_special[startDate == endDate, startDate := startDate - days(1)]
result_sp3 = foverlaps(dt_special, intervals, by.x = colsm1, by.y = colsm1)
result_sp3[i.startDate == endDatem1, startDate := endDate]
result_sp3
```

What we did was:

1.  subtract 1 day from startDate if it equals endDate

2.  do our foverlaps procedure from above

3.  set startDate to endDate if the original i.startDate (the one we changed) equals our manipulated endDatem1
